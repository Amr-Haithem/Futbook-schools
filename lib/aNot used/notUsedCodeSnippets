 //to put the uid in the model of CustomUser
 /* CustomUser _userFromFirebaseUser(User user) {
    print(user) ;
    return user != null ? CustomUser(uid: user.uid) : null;
  }*/





  //ui for signing out

  /* actions: [
            FlatButton.icon(icon:Icon(Icons.person),onPressed: ()async { await _auth.signOut();}, label: Text('log out'))
          ],*/


//to generate number of widget
List.generate(
                15,
                (index) => TextButton(
                  child: Text('hello',style: TextStyle(fontSize: 50),),
                  onPressed: () {},
                  style: TextButton.styleFrom(
                    primary: Colors.amber,
                    minimumSize: Size(300.0, 200.0),
                  ),
                ),
              )

//this didn't work(not listening to return statement)

    for (int i = 0; i < requestedSlotsIndices.length; i++) {
      await databaseReference
          .child("Reservation_Data")
          //will be replaced by user from email
          .child("UndefinedSchool")
          .child(requestedFieldIndex.toString())
          .child("day0")
          .child(requestedSlotsIndices[i].toString())
          .once()
          .then((DataSnapshot dss) {
            print(dss.value as bool);
        if (dss.value as bool == true) {
          return false;
        }
      });
    }

    return true;
  }

  // the cow function

  Future<Map> unReserveForCustomer(
      User user, int fieldIndex, List slotIndices) async {
    Map<dynamic, dynamic> data;

    await databaseReference
        .child("Reservation_Data")
        //will be replaced by user from email
        .child("UndefinedSchool")
        .child(fieldIndex.toString())
        .child("day0")
        .child("EachReservationData")
        // here we implement a dynamic way to set data in the EachReservationData
        .get()
        .then((DataSnapshot dataSnapShot) {
      data = dataSnapShot.value;
    });
    List reservationDataOfCustomers = data.values.toList();
    for (int i = 0; i < reservationDataOfCustomers.length; i++) {
      List slotsReservedFormDB =
          reservationDataOfCustomers[i].values.toList()[2];
      if (eq(slotIndices, slotsReservedFormDB)) {
        print("exists");
        break;
      }
    }
  }


  //old slots orientation
   SingleButtonBlock(slot: '8-9 AM', associatedIndex: 0),
                        SingleButtonBlock(slot: '9-10 AM', associatedIndex: 1),
                        SingleButtonBlock(slot: '10-11 AM', associatedIndex: 2),
                        SingleButtonBlock(slot: '11-12 AM', associatedIndex: 3),
                        SingleButtonBlock(slot: '12-1 PM', associatedIndex: 4),
                        SingleButtonBlock(slot: '1-2 PM', associatedIndex: 5),
                        SingleButtonBlock(slot: '2-3 PM', associatedIndex: 6),
                        SingleButtonBlock(slot: '3-4 PM', associatedIndex: 7),
                        SingleButtonBlock(slot: '4-5 PM', associatedIndex: 8),
                        SingleButtonBlock(slot: '5-6 PM', associatedIndex: 9),
                        SingleButtonBlock(slot: '6-8 PM', associatedIndex: 10),
                        SingleButtonBlock(slot: '8-9 PM', associatedIndex: 11),
                        SingleButtonBlock(slot: '9-10 PM', associatedIndex: 12),
                        SingleButtonBlock(slot: '10-11 PM', associatedIndex: 13),
                        SingleButtonBlock(slot: '12-1 AM', associatedIndex: 14),








   void listenToThisPageSlots(
         User user, int fieldIndex) {
       FirebaseDatabase.instance
           .reference()
           .child("User data")
           .child("UndefinedSchool")
           .child(fieldIndex.toString())
           .child("day0")
           //todo take a look if to change on vlaue
           .onValue
           .listen((event) {
         print("listened blah blah");
         Map data = event.snapshot.value;
         dataReservation=[];
         data.forEach((key, value) {
           dataReservation.add(ReservationHolder(
             name: value['nameOfCustomer'],
             phoneNumber: value['phoneNumberOfCustomer'],
             slots: value['slots'],
           ));
         });
         //here
       });
     }

     //staggered grid view
     StaggeredGridView.countBuilder(
                               physics: NeverScrollableScrollPhysics(),
                               padding: EdgeInsets.symmetric(
                                   vertical: 50, horizontal: 65),
                               scrollDirection: Axis.horizontal,
                                 staggeredTileBuilder: (index) => StaggeredTile.extent(
                                   1 * scaleFunctions(index, listOfAllData), 220),
                               crossAxisCount: 5,

                               crossAxisSpacing: 10.0,
                               mainAxisSpacing: 10.0,
                               itemCount: 16 - numberOfSlotsRemoved,
                               itemBuilder: (ctx, index) {
                                 if (listOfAllData != null &&
                                     index < listOfAllData.length &&
                                     index + shifterAmigo ==
                                         listOfAllData[index]['slots'][0]) {
                                   shifterAmigo +=
                                       listOfAllData[index]['slots'].length - 1;

                                   return SingleButtonBlock(
                                     slot: widget.SlotsMeaning[index],
                                     scale: listOfAllData[index]['slots'].length,
                                     slots: listOfAllData[index]['slots'],
                                     name: listOfAllData[index]['nameOfCustomer'],
                                     phoneNumber: listOfAllData[index]
                                         ['phoneNumberOfCustomer'],
                                     Reserved: true,
                                   );
                                 } else {
                                   return SingleButtonBlock(
                                       slot: widget.SlotsMeaning[index],
                                       scale: 1,
                                       slots: listProviderForNumbersBiggerThan9(
                                           index + shifterAmigo),
                                       Reserved: false);
                                 }
                               })


                               /*allData.forEach((key, value) {
                                                         numberOfSlotsRemoved += value["slots"].length - 1;
                                                       });*/